// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/mapping.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/mapping.go -destination=internal/core/port/mocks/mapping_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "nodemgr/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMappingRepository is a mock of MappingRepository interface.
type MockMappingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMappingRepositoryMockRecorder
	isgomock struct{}
}

// MockMappingRepositoryMockRecorder is the mock recorder for MockMappingRepository.
type MockMappingRepositoryMockRecorder struct {
	mock *MockMappingRepository
}

// NewMockMappingRepository creates a new mock instance.
func NewMockMappingRepository(ctrl *gomock.Controller) *MockMappingRepository {
	mock := &MockMappingRepository{ctrl: ctrl}
	mock.recorder = &MockMappingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMappingRepository) EXPECT() *MockMappingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMappingRepository) Create(mapping domain.NodeSpecMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", mapping)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMappingRepositoryMockRecorder) Create(mapping any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMappingRepository)(nil).Create), mapping)
}

// Delete mocks base method.
func (m *MockMappingRepository) Delete(id domain.MappingID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMappingRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMappingRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockMappingRepository) Get(id domain.MappingID) (*domain.NodeSpecMapping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*domain.NodeSpecMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMappingRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMappingRepository)(nil).Get), id)
}

// List mocks base method.
func (m *MockMappingRepository) List() ([]*domain.NodeSpecMapping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*domain.NodeSpecMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMappingRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMappingRepository)(nil).List))
}

// MockMappingService is a mock of MappingService interface.
type MockMappingService struct {
	ctrl     *gomock.Controller
	recorder *MockMappingServiceMockRecorder
	isgomock struct{}
}

// MockMappingServiceMockRecorder is the mock recorder for MockMappingService.
type MockMappingServiceMockRecorder struct {
	mock *MockMappingService
}

// NewMockMappingService creates a new mock instance.
func NewMockMappingService(ctrl *gomock.Controller) *MockMappingService {
	mock := &MockMappingService{ctrl: ctrl}
	mock.recorder = &MockMappingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMappingService) EXPECT() *MockMappingServiceMockRecorder {
	return m.recorder
}

// CreateMapping mocks base method.
func (m *MockMappingService) CreateMapping(mapping domain.NodeSpecMapping) (domain.MappingID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapping", mapping)
	ret0, _ := ret[0].(domain.MappingID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapping indicates an expected call of CreateMapping.
func (mr *MockMappingServiceMockRecorder) CreateMapping(mapping any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapping", reflect.TypeOf((*MockMappingService)(nil).CreateMapping), mapping)
}

// DeleteMapping mocks base method.
func (m *MockMappingService) DeleteMapping(id domain.MappingID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapping", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapping indicates an expected call of DeleteMapping.
func (mr *MockMappingServiceMockRecorder) DeleteMapping(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapping", reflect.TypeOf((*MockMappingService)(nil).DeleteMapping), id)
}

// GetMapping mocks base method.
func (m *MockMappingService) GetMapping(id domain.MappingID) (*domain.NodeSpecMapping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapping", id)
	ret0, _ := ret[0].(*domain.NodeSpecMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapping indicates an expected call of GetMapping.
func (mr *MockMappingServiceMockRecorder) GetMapping(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapping", reflect.TypeOf((*MockMappingService)(nil).GetMapping), id)
}

// ListMappings mocks base method.
func (m *MockMappingService) ListMappings() ([]*domain.NodeSpecMapping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMappings")
	ret0, _ := ret[0].([]*domain.NodeSpecMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMappings indicates an expected call of ListMappings.
func (mr *MockMappingServiceMockRecorder) ListMappings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMappings", reflect.TypeOf((*MockMappingService)(nil).ListMappings))
}

// ResolveSpecAliases mocks base method.
func (m *MockMappingService) ResolveSpecAliases(spec domain.NodeSpec) (domain.NodeSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveSpecAliases", spec)
	ret0, _ := ret[0].(domain.NodeSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveSpecAliases indicates an expected call of ResolveSpecAliases.
func (mr *MockMappingServiceMockRecorder) ResolveSpecAliases(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveSpecAliases", reflect.TypeOf((*MockMappingService)(nil).ResolveSpecAliases), spec)
}
