// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/template.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/template.go -destination=internal/core/port/mocks/template_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "nodemgr/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTemplateRepository is a mock of TemplateRepository interface.
type MockTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateRepositoryMockRecorder
	isgomock struct{}
}

// MockTemplateRepositoryMockRecorder is the mock recorder for MockTemplateRepository.
type MockTemplateRepositoryMockRecorder struct {
	mock *MockTemplateRepository
}

// NewMockTemplateRepository creates a new mock instance.
func NewMockTemplateRepository(ctrl *gomock.Controller) *MockTemplateRepository {
	mock := &MockTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateRepository) EXPECT() *MockTemplateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTemplateRepository) Create(tmpl domain.NodeTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tmpl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTemplateRepositoryMockRecorder) Create(tmpl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTemplateRepository)(nil).Create), tmpl)
}

// Delete mocks base method.
func (m *MockTemplateRepository) Delete(id domain.TemplateID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTemplateRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTemplateRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockTemplateRepository) Get(id domain.TemplateID) (*domain.NodeTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*domain.NodeTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTemplateRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTemplateRepository)(nil).Get), id)
}

// List mocks base method.
func (m *MockTemplateRepository) List() ([]*domain.NodeTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*domain.NodeTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTemplateRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTemplateRepository)(nil).List))
}

// MockTemplateService is a mock of TemplateService interface.
type MockTemplateService struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateServiceMockRecorder
	isgomock struct{}
}

// MockTemplateServiceMockRecorder is the mock recorder for MockTemplateService.
type MockTemplateServiceMockRecorder struct {
	mock *MockTemplateService
}

// NewMockTemplateService creates a new mock instance.
func NewMockTemplateService(ctrl *gomock.Controller) *MockTemplateService {
	mock := &MockTemplateService{ctrl: ctrl}
	mock.recorder = &MockTemplateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateService) EXPECT() *MockTemplateServiceMockRecorder {
	return m.recorder
}

// CreateTemplate mocks base method.
func (m *MockTemplateService) CreateTemplate(template domain.NodeTemplate) (domain.TemplateID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", template)
	ret0, _ := ret[0].(domain.TemplateID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate.
func (mr *MockTemplateServiceMockRecorder) CreateTemplate(template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockTemplateService)(nil).CreateTemplate), template)
}

// DeleteTemplate mocks base method.
func (m *MockTemplateService) DeleteTemplate(id domain.TemplateID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate.
func (mr *MockTemplateServiceMockRecorder) DeleteTemplate(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockTemplateService)(nil).DeleteTemplate), id)
}

// GetTemplate mocks base method.
func (m *MockTemplateService) GetTemplate(id domain.TemplateID) (*domain.NodeTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", id)
	ret0, _ := ret[0].(*domain.NodeTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockTemplateServiceMockRecorder) GetTemplate(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockTemplateService)(nil).GetTemplate), id)
}

// ListTemplates mocks base method.
func (m *MockTemplateService) ListTemplates() ([]*domain.NodeTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplates")
	ret0, _ := ret[0].([]*domain.NodeTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplates indicates an expected call of ListTemplates.
func (mr *MockTemplateServiceMockRecorder) ListTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockTemplateService)(nil).ListTemplates))
}

// RenderTemplate mocks base method.
func (m *MockTemplateService) RenderTemplate(templateID domain.TemplateID, providerID domain.ProviderID) (domain.NodeSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderTemplate", templateID, providerID)
	ret0, _ := ret[0].(domain.NodeSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderTemplate indicates an expected call of RenderTemplate.
func (mr *MockTemplateServiceMockRecorder) RenderTemplate(templateID, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderTemplate", reflect.TypeOf((*MockTemplateService)(nil).RenderTemplate), templateID, providerID)
}
