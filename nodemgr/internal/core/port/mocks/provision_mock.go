// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/provision.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/provision.go -destination=internal/core/port/mocks/provision_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "nodemgr/internal/core/domain"
	port "nodemgr/internal/core/port"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNodeRepository is a mock of NodeRepository interface.
type MockNodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNodeRepositoryMockRecorder
	isgomock struct{}
}

// MockNodeRepositoryMockRecorder is the mock recorder for MockNodeRepository.
type MockNodeRepositoryMockRecorder struct {
	mock *MockNodeRepository
}

// NewMockNodeRepository creates a new mock instance.
func NewMockNodeRepository(ctrl *gomock.Controller) *MockNodeRepository {
	mock := &MockNodeRepository{ctrl: ctrl}
	mock.recorder = &MockNodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeRepository) EXPECT() *MockNodeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNodeRepository) Create(node domain.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNodeRepositoryMockRecorder) Create(node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNodeRepository)(nil).Create), node)
}

// Delete mocks base method.
func (m *MockNodeRepository) Delete(id domain.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNodeRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNodeRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockNodeRepository) Get(id domain.NodeID) (*domain.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*domain.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNodeRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNodeRepository)(nil).Get), id)
}

// List mocks base method.
func (m *MockNodeRepository) List() ([]*domain.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*domain.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNodeRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNodeRepository)(nil).List))
}

// MockNodeProviderRepository is a mock of NodeProviderRepository interface.
type MockNodeProviderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNodeProviderRepositoryMockRecorder
	isgomock struct{}
}

// MockNodeProviderRepositoryMockRecorder is the mock recorder for MockNodeProviderRepository.
type MockNodeProviderRepositoryMockRecorder struct {
	mock *MockNodeProviderRepository
}

// NewMockNodeProviderRepository creates a new mock instance.
func NewMockNodeProviderRepository(ctrl *gomock.Controller) *MockNodeProviderRepository {
	mock := &MockNodeProviderRepository{ctrl: ctrl}
	mock.recorder = &MockNodeProviderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeProviderRepository) EXPECT() *MockNodeProviderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNodeProviderRepository) Create(provider port.NodeProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNodeProviderRepositoryMockRecorder) Create(provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNodeProviderRepository)(nil).Create), provider)
}

// Delete mocks base method.
func (m *MockNodeProviderRepository) Delete(id domain.ProviderID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNodeProviderRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNodeProviderRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockNodeProviderRepository) Get(id domain.ProviderID) (*port.NodeProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*port.NodeProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNodeProviderRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNodeProviderRepository)(nil).Get), id)
}

// List mocks base method.
func (m *MockNodeProviderRepository) List() []*port.NodeProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*port.NodeProvider)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockNodeProviderRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNodeProviderRepository)(nil).List))
}

// MockNodeProvider is a mock of NodeProvider interface.
type MockNodeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNodeProviderMockRecorder
	isgomock struct{}
}

// MockNodeProviderMockRecorder is the mock recorder for MockNodeProvider.
type MockNodeProviderMockRecorder struct {
	mock *MockNodeProvider
}

// NewMockNodeProvider creates a new mock instance.
func NewMockNodeProvider(ctrl *gomock.Controller) *MockNodeProvider {
	mock := &MockNodeProvider{ctrl: ctrl}
	mock.recorder = &MockNodeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeProvider) EXPECT() *MockNodeProviderMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockNodeProvider) Destroy(nodeID domain.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockNodeProviderMockRecorder) Destroy(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockNodeProvider)(nil).Destroy), nodeID)
}

// ID mocks base method.
func (m *MockNodeProvider) ID() domain.ProviderID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(domain.ProviderID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockNodeProviderMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockNodeProvider)(nil).ID))
}

// Provision mocks base method.
func (m *MockNodeProvider) Provision(spec domain.NodeSpec) (*domain.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provision", spec)
	ret0, _ := ret[0].(*domain.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provision indicates an expected call of Provision.
func (mr *MockNodeProviderMockRecorder) Provision(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provision", reflect.TypeOf((*MockNodeProvider)(nil).Provision), spec)
}

// MockNodeProvisionService is a mock of NodeProvisionService interface.
type MockNodeProvisionService struct {
	ctrl     *gomock.Controller
	recorder *MockNodeProvisionServiceMockRecorder
	isgomock struct{}
}

// MockNodeProvisionServiceMockRecorder is the mock recorder for MockNodeProvisionService.
type MockNodeProvisionServiceMockRecorder struct {
	mock *MockNodeProvisionService
}

// NewMockNodeProvisionService creates a new mock instance.
func NewMockNodeProvisionService(ctrl *gomock.Controller) *MockNodeProvisionService {
	mock := &MockNodeProvisionService{ctrl: ctrl}
	mock.recorder = &MockNodeProvisionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeProvisionService) EXPECT() *MockNodeProvisionServiceMockRecorder {
	return m.recorder
}

// DestroyNode mocks base method.
func (m *MockNodeProvisionService) DestroyNode(nodeID domain.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyNode", nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyNode indicates an expected call of DestroyNode.
func (mr *MockNodeProvisionServiceMockRecorder) DestroyNode(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyNode", reflect.TypeOf((*MockNodeProvisionService)(nil).DestroyNode), nodeID)
}

// ProvisionNode mocks base method.
func (m *MockNodeProvisionService) ProvisionNode(spec domain.NodeSpec) (*domain.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionNode", spec)
	ret0, _ := ret[0].(*domain.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionNode indicates an expected call of ProvisionNode.
func (mr *MockNodeProvisionServiceMockRecorder) ProvisionNode(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionNode", reflect.TypeOf((*MockNodeProvisionService)(nil).ProvisionNode), spec)
}
