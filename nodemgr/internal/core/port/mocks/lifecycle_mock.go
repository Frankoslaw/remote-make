// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/lifecycle.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/lifecycle.go -destination=internal/core/port/mocks/lifecycle_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "nodemgr/internal/core/domain"
	port "nodemgr/internal/core/port"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNodeLifecycle is a mock of NodeLifecycle interface.
type MockNodeLifecycle struct {
	ctrl     *gomock.Controller
	recorder *MockNodeLifecycleMockRecorder
	isgomock struct{}
}

// MockNodeLifecycleMockRecorder is the mock recorder for MockNodeLifecycle.
type MockNodeLifecycleMockRecorder struct {
	mock *MockNodeLifecycle
}

// NewMockNodeLifecycle creates a new mock instance.
func NewMockNodeLifecycle(ctrl *gomock.Controller) *MockNodeLifecycle {
	mock := &MockNodeLifecycle{ctrl: ctrl}
	mock.recorder = &MockNodeLifecycleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeLifecycle) EXPECT() *MockNodeLifecycleMockRecorder {
	return m.recorder
}

// OpenLifecycleHandle mocks base method.
func (m *MockNodeLifecycle) OpenLifecycleHandle(node *domain.Node) (port.NodeLifecycleHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenLifecycleHandle", node)
	ret0, _ := ret[0].(port.NodeLifecycleHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenLifecycleHandle indicates an expected call of OpenLifecycleHandle.
func (mr *MockNodeLifecycleMockRecorder) OpenLifecycleHandle(node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenLifecycleHandle", reflect.TypeOf((*MockNodeLifecycle)(nil).OpenLifecycleHandle), node)
}

// MockNodeLifecycleHandle is a mock of NodeLifecycleHandle interface.
type MockNodeLifecycleHandle struct {
	ctrl     *gomock.Controller
	recorder *MockNodeLifecycleHandleMockRecorder
	isgomock struct{}
}

// MockNodeLifecycleHandleMockRecorder is the mock recorder for MockNodeLifecycleHandle.
type MockNodeLifecycleHandleMockRecorder struct {
	mock *MockNodeLifecycleHandle
}

// NewMockNodeLifecycleHandle creates a new mock instance.
func NewMockNodeLifecycleHandle(ctrl *gomock.Controller) *MockNodeLifecycleHandle {
	mock := &MockNodeLifecycleHandle{ctrl: ctrl}
	mock.recorder = &MockNodeLifecycleHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeLifecycleHandle) EXPECT() *MockNodeLifecycleHandleMockRecorder {
	return m.recorder
}

// Reboot mocks base method.
func (m *MockNodeLifecycleHandle) Reboot() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reboot")
}

// Reboot indicates an expected call of Reboot.
func (mr *MockNodeLifecycleHandleMockRecorder) Reboot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockNodeLifecycleHandle)(nil).Reboot))
}

// Start mocks base method.
func (m *MockNodeLifecycleHandle) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockNodeLifecycleHandleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNodeLifecycleHandle)(nil).Start))
}

// Stop mocks base method.
func (m *MockNodeLifecycleHandle) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockNodeLifecycleHandleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNodeLifecycleHandle)(nil).Stop))
}

// Terminate mocks base method.
func (m *MockNodeLifecycleHandle) Terminate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Terminate")
}

// Terminate indicates an expected call of Terminate.
func (mr *MockNodeLifecycleHandleMockRecorder) Terminate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockNodeLifecycleHandle)(nil).Terminate))
}

// MockNodeLifecycleService is a mock of NodeLifecycleService interface.
type MockNodeLifecycleService struct {
	ctrl     *gomock.Controller
	recorder *MockNodeLifecycleServiceMockRecorder
	isgomock struct{}
}

// MockNodeLifecycleServiceMockRecorder is the mock recorder for MockNodeLifecycleService.
type MockNodeLifecycleServiceMockRecorder struct {
	mock *MockNodeLifecycleService
}

// NewMockNodeLifecycleService creates a new mock instance.
func NewMockNodeLifecycleService(ctrl *gomock.Controller) *MockNodeLifecycleService {
	mock := &MockNodeLifecycleService{ctrl: ctrl}
	mock.recorder = &MockNodeLifecycleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeLifecycleService) EXPECT() *MockNodeLifecycleServiceMockRecorder {
	return m.recorder
}

// RebootNode mocks base method.
func (m *MockNodeLifecycleService) RebootNode(nodeID domain.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootNode", nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebootNode indicates an expected call of RebootNode.
func (mr *MockNodeLifecycleServiceMockRecorder) RebootNode(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootNode", reflect.TypeOf((*MockNodeLifecycleService)(nil).RebootNode), nodeID)
}

// StartNode mocks base method.
func (m *MockNodeLifecycleService) StartNode(nodeID domain.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartNode", nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartNode indicates an expected call of StartNode.
func (mr *MockNodeLifecycleServiceMockRecorder) StartNode(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNode", reflect.TypeOf((*MockNodeLifecycleService)(nil).StartNode), nodeID)
}

// StopNode mocks base method.
func (m *MockNodeLifecycleService) StopNode(nodeID domain.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopNode", nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopNode indicates an expected call of StopNode.
func (mr *MockNodeLifecycleServiceMockRecorder) StopNode(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopNode", reflect.TypeOf((*MockNodeLifecycleService)(nil).StopNode), nodeID)
}

// TerminateNode mocks base method.
func (m *MockNodeLifecycleService) TerminateNode(nodeID domain.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateNode", nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateNode indicates an expected call of TerminateNode.
func (mr *MockNodeLifecycleServiceMockRecorder) TerminateNode(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateNode", reflect.TypeOf((*MockNodeLifecycleService)(nil).TerminateNode), nodeID)
}
