// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/execute.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/execute.go -destination=internal/core/port/mocks/execute_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	domain "nodemgr/internal/core/domain"
	port "nodemgr/internal/core/port"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNodeExecProviderRepository is a mock of NodeExecProviderRepository interface.
type MockNodeExecProviderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNodeExecProviderRepositoryMockRecorder
	isgomock struct{}
}

// MockNodeExecProviderRepositoryMockRecorder is the mock recorder for MockNodeExecProviderRepository.
type MockNodeExecProviderRepositoryMockRecorder struct {
	mock *MockNodeExecProviderRepository
}

// NewMockNodeExecProviderRepository creates a new mock instance.
func NewMockNodeExecProviderRepository(ctrl *gomock.Controller) *MockNodeExecProviderRepository {
	mock := &MockNodeExecProviderRepository{ctrl: ctrl}
	mock.recorder = &MockNodeExecProviderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeExecProviderRepository) EXPECT() *MockNodeExecProviderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNodeExecProviderRepository) Create(provider port.NodeExecProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNodeExecProviderRepositoryMockRecorder) Create(provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNodeExecProviderRepository)(nil).Create), provider)
}

// Delete mocks base method.
func (m *MockNodeExecProviderRepository) Delete(id domain.ExecProviderID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNodeExecProviderRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNodeExecProviderRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockNodeExecProviderRepository) Get(id domain.ExecProviderID) (*port.NodeExecProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*port.NodeExecProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNodeExecProviderRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNodeExecProviderRepository)(nil).Get), id)
}

// List mocks base method.
func (m *MockNodeExecProviderRepository) List() ([]*port.NodeExecProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*port.NodeExecProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNodeExecProviderRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNodeExecProviderRepository)(nil).List))
}

// MockExecHandleRepository is a mock of ExecHandleRepository interface.
type MockExecHandleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExecHandleRepositoryMockRecorder
	isgomock struct{}
}

// MockExecHandleRepositoryMockRecorder is the mock recorder for MockExecHandleRepository.
type MockExecHandleRepositoryMockRecorder struct {
	mock *MockExecHandleRepository
}

// NewMockExecHandleRepository creates a new mock instance.
func NewMockExecHandleRepository(ctrl *gomock.Controller) *MockExecHandleRepository {
	mock := &MockExecHandleRepository{ctrl: ctrl}
	mock.recorder = &MockExecHandleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecHandleRepository) EXPECT() *MockExecHandleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExecHandleRepository) Create(handle port.ExecHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", handle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExecHandleRepositoryMockRecorder) Create(handle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExecHandleRepository)(nil).Create), handle)
}

// Delete mocks base method.
func (m *MockExecHandleRepository) Delete(id domain.ExecHandleID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExecHandleRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExecHandleRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockExecHandleRepository) Get(id domain.ExecHandleID) (*port.ExecHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*port.ExecHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExecHandleRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExecHandleRepository)(nil).Get), id)
}

// List mocks base method.
func (m *MockExecHandleRepository) List() ([]*port.ExecHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*port.ExecHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockExecHandleRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExecHandleRepository)(nil).List))
}

// MockNodeExecProvider is a mock of NodeExecProvider interface.
type MockNodeExecProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNodeExecProviderMockRecorder
	isgomock struct{}
}

// MockNodeExecProviderMockRecorder is the mock recorder for MockNodeExecProvider.
type MockNodeExecProviderMockRecorder struct {
	mock *MockNodeExecProvider
}

// NewMockNodeExecProvider creates a new mock instance.
func NewMockNodeExecProvider(ctrl *gomock.Controller) *MockNodeExecProvider {
	mock := &MockNodeExecProvider{ctrl: ctrl}
	mock.recorder = &MockNodeExecProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeExecProvider) EXPECT() *MockNodeExecProviderMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockNodeExecProvider) ID() domain.ExecProviderID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(domain.ExecProviderID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockNodeExecProviderMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockNodeExecProvider)(nil).ID))
}

// OpenExecHandle mocks base method.
func (m *MockNodeExecProvider) OpenExecHandle(node *domain.Node) (port.ExecHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenExecHandle", node)
	ret0, _ := ret[0].(port.ExecHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenExecHandle indicates an expected call of OpenExecHandle.
func (mr *MockNodeExecProviderMockRecorder) OpenExecHandle(node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenExecHandle", reflect.TypeOf((*MockNodeExecProvider)(nil).OpenExecHandle), node)
}

// MockExecHandle is a mock of ExecHandle interface.
type MockExecHandle struct {
	ctrl     *gomock.Controller
	recorder *MockExecHandleMockRecorder
	isgomock struct{}
}

// MockExecHandleMockRecorder is the mock recorder for MockExecHandle.
type MockExecHandleMockRecorder struct {
	mock *MockExecHandle
}

// NewMockExecHandle creates a new mock instance.
func NewMockExecHandle(ctrl *gomock.Controller) *MockExecHandle {
	mock := &MockExecHandle{ctrl: ctrl}
	mock.recorder = &MockExecHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecHandle) EXPECT() *MockExecHandleMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockExecHandle) Attach(attach domain.AttachRequest) (*domain.AttachResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", attach)
	ret0, _ := ret[0].(*domain.AttachResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attach indicates an expected call of Attach.
func (mr *MockExecHandleMockRecorder) Attach(attach any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockExecHandle)(nil).Attach), attach)
}

// Close mocks base method.
func (m *MockExecHandle) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockExecHandleMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockExecHandle)(nil).Close))
}

// CopyFrom mocks base method.
func (m *MockExecHandle) CopyFrom(src string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", src)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockExecHandleMockRecorder) CopyFrom(src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockExecHandle)(nil).CopyFrom), src)
}

// CopyTo mocks base method.
func (m *MockExecHandle) CopyTo(src io.Reader, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyTo", src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyTo indicates an expected call of CopyTo.
func (mr *MockExecHandleMockRecorder) CopyTo(src, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTo", reflect.TypeOf((*MockExecHandle)(nil).CopyTo), src, dst)
}

// Exec mocks base method.
func (m *MockExecHandle) Exec(req domain.ExecRequest) (*domain.ExecResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", req)
	ret0, _ := ret[0].(*domain.ExecResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockExecHandleMockRecorder) Exec(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExecHandle)(nil).Exec), req)
}

// ExecStream mocks base method.
func (m *MockExecHandle) ExecStream(exec domain.ExecRequest, attach domain.AttachRequest) (*domain.AttachResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecStream", exec, attach)
	ret0, _ := ret[0].(*domain.AttachResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecStream indicates an expected call of ExecStream.
func (mr *MockExecHandleMockRecorder) ExecStream(exec, attach any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecStream", reflect.TypeOf((*MockExecHandle)(nil).ExecStream), exec, attach)
}

// ID mocks base method.
func (m *MockExecHandle) ID() domain.ExecHandleID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(domain.ExecHandleID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockExecHandleMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockExecHandle)(nil).ID))
}

// MockNodeExecuteService is a mock of NodeExecuteService interface.
type MockNodeExecuteService struct {
	ctrl     *gomock.Controller
	recorder *MockNodeExecuteServiceMockRecorder
	isgomock struct{}
}

// MockNodeExecuteServiceMockRecorder is the mock recorder for MockNodeExecuteService.
type MockNodeExecuteServiceMockRecorder struct {
	mock *MockNodeExecuteService
}

// NewMockNodeExecuteService creates a new mock instance.
func NewMockNodeExecuteService(ctrl *gomock.Controller) *MockNodeExecuteService {
	mock := &MockNodeExecuteService{ctrl: ctrl}
	mock.recorder = &MockNodeExecuteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeExecuteService) EXPECT() *MockNodeExecuteServiceMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockNodeExecuteService) Attach(req domain.AttachRequest) (*domain.AttachResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", req)
	ret0, _ := ret[0].(*domain.AttachResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attach indicates an expected call of Attach.
func (mr *MockNodeExecuteServiceMockRecorder) Attach(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockNodeExecuteService)(nil).Attach), req)
}

// CopyFrom mocks base method.
func (m *MockNodeExecuteService) CopyFrom(req domain.CopyFromRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockNodeExecuteServiceMockRecorder) CopyFrom(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockNodeExecuteService)(nil).CopyFrom), req)
}

// CopyTo mocks base method.
func (m *MockNodeExecuteService) CopyTo(req domain.CopyToRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyTo", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyTo indicates an expected call of CopyTo.
func (mr *MockNodeExecuteServiceMockRecorder) CopyTo(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTo", reflect.TypeOf((*MockNodeExecuteService)(nil).CopyTo), req)
}

// Exec mocks base method.
func (m *MockNodeExecuteService) Exec(req domain.ExecRequest) (*domain.ExecResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", req)
	ret0, _ := ret[0].(*domain.ExecResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockNodeExecuteServiceMockRecorder) Exec(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockNodeExecuteService)(nil).Exec), req)
}

// ExecStream mocks base method.
func (m *MockNodeExecuteService) ExecStream(exec domain.ExecRequest, attach domain.AttachRequest) (*domain.AttachResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecStream", exec, attach)
	ret0, _ := ret[0].(*domain.AttachResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecStream indicates an expected call of ExecStream.
func (mr *MockNodeExecuteServiceMockRecorder) ExecStream(exec, attach any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecStream", reflect.TypeOf((*MockNodeExecuteService)(nil).ExecStream), exec, attach)
}
